@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # int locationX
    # int locationY
    # int speedX
    # int speedY
    # BufferedImage image
    # int width
    # int height
    # boolean isValid

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject abstractFlyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}

abstract class Game
{
    - Game game {volatile} {static}
    - int backGroundTop
    - ScheduledExecutorService executorService {final}
    - int timeInterval
    # HeroAircraft heroAircraft {final}
    - List<AbstractAircraft> enemyAircrafts {final}
    - List<BaseBullet> heroBullets {final}
    - List<BaseBullet> enemyBullets {final}
    - List<AbstractProp> Props {final}
    - EnemyFactory enemyFactory
    - BombPublisher bombPublisher
    # int enemyMaxNumber
    - boolean gameOverFlag
    - int score {static}
    # int scoreIncrease
    - int time
    - boolean bossFlag
    + String gameModel {static}
    # int mobPercent
    # int bossPercent
    * int enemyShootCount
    * int heroShootCount
    # int enemyShootTime
    # int heroShootTime
    - int mobPercentIncrease
    - int cycleDuration
    - int cycleTime
    - MusicThread[] musicThread
    + boolean bulletMusicFlag {static}

    + Game()
    + action():void
    + increaseScore():void
    - enemyGenerate():void
    - cycleMusic():void
    + {static} getGameModel():String
    + {static} getScore():int
    # {abstract} initGame():void
    - getRandomInt(int min,int max):int
    - timeCountAndNewCycleJudge():boolean
    - shootAction():void
    - bulletsMoveAction():void
    - aircraftsMoveAction():void
    - propMoveAction():void
    - crashCheckAction():void
    - postProcessAction():void
    + paint(Graphics g):void
    - paintImageWithPositionRevised(Graphics g, List<? extends AbstractFlyingObject> objects):void
    - paintScoreAndLife(Graphics g):void
}

abstract class AbstractAircraft
{
	# int maxHp
    # int hp

    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + getHp():int
    + enemyUpdate():void
    + getRandomInt(int min,int max):int
    + {abstract} shoot():List<Bullet>
    + {abstract} getDirection:int
    + {abstract} getShootNum:int
    + {abstract} getPower:int
    + {abstract} getMultiNum:int
 }

abstract class AbstractEnemy
{

}

interface Enemy
{
    addProp():List<AbstractProp>
}

interface EnemyFactory
{
    createEnemy():AbstractAircraft
}

abstract class BaseBullet
{
    - int power

    + Bullet(int locationX, int locationY, int speedX, int speedY, int power)
    + update():void
    + forward():void
	+ getPower():int
}

abstract class AbstractProp
{
    + AbstractProp(int locationX, int locationY, int speedX, int speedY)
    + forward():void
}

interface Prop {
    effect(HeroAircraft heroAircraft, List<AbstractAircraft> enemyAircrafts, List<BaseBullet> enemyBullets):void
}

interface PropFactory {
    createProp(int locationX, int locationY, int speedY):AbstractProp
}

interface Subscriber
{
    update():void
}

interface PlayerDao
{
    findByPlayerName(String playerName):Player
    getAllPlayer():List<Player>
    doAdd(Player player):void
    doDelete(String playerName):void
    writeToFile(String fileName) throws IOException:void
    readFromFile(String fileName) throws IOException:void
}

interface Strategy
{
    shootFunction(int shootNum, int locationX, int locationY, int speedY, int power):List<BaseBullet>
}

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet
AbstractFlyingObject <|-- AbstractProp

AbstractAircraft <|-- HeroAircraft
AbstractAircraft <|-- AbstractEnemy

Enemy <|.. AbstractEnemy

AbstractEnemy <|-- MobEnemy
AbstractEnemy <|-- EliteEnemy
AbstractEnemy <|-- BossEnemy

EnemyFactory <|.. MobFactory
EnemyFactory <|.. EliteFactory
EnemyFactory <|.. BossFactory

MobEnemy <.. MobFactory
EliteEnemy <.. EliteFactory
BossEnemy <.. BossFactory

Game <|--EasyModeGame
Game <|--NormalModeGame
Game <|--HardModeGame

BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet

AbstractProp <|-- BloodProp
AbstractProp <|-- BombProp
AbstractProp <|-- BulletProp

Prop <|.. BloodProp
Prop <|.. BombProp
Prop <|.. BulletProp

PropFactory <|.. BloodPropFactory
PropFactory <|.. BombPropFactory
PropFactory <|.. BulletPropFactory

BloodProp <.. BloodPropFactory
BombProp <.. BombPropFactory
BulletProp <.. BulletPropFactory

Subscriber <..o BombPublisher

Subscriber <|.. AbstractAircraft
Subscriber <|.. BaseBullet

Player <-- PlayerDaoImpl

PlayerDao <|.. PlayerDaoImpl

Strategy <--o Context

Strategy <|.. SlashShoot
Strategy <|.. StraightShoot

Context <-- EliteEnemy
Context <-- BossEnemy
Context <-- HeroAircraft

StraightShoot <..  EliteEnemy
SlashShoot <.. BossEnemy
StraightShoot <.. HeroAircraft

class HeroAircraft {
    - HeroAircraft heroAircraft {static} {volatile}
    - int shootNum
    - int power
    - int direction
    - int mutliNum
      Context context

    - HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + setMutliNum(int mutliNum):void
    + setPower(int power):void
    + setHeroAircraftHp(int hp):void
    + getDirection():int
    + {static} getHeroAircraft():HeroAircraft
    + forward():void
    + increaseShootNum(int increase):void
    + getShootNum():int
    + shoot():List<Bullet>
    + addProp():List<AbstractProp>
    + getPower():int
    + getMultiNum():int
    + changeStrategy(Strategy strategy):void
}

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<Bullet>
    + addProp():List<AbstractProp>
    + getDirection():int
    + getShootNum():int
    + getPower():int
    + getMultiNum():int
}

class MobFactory {
    + createEnemy():AbstractAircraft
}

class EliteEnemy {
    - int shootNum
    - int power
    - int direction

    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + getDirection():int
    + forward():void
    + shoot():List<Bullet>
    + getPower():int
    + getShootNum():int
    + getMultiNum():int
    + addProp():List<AbstractProp>
}

class EliteFactory {
    + createEnemy():AbstractAircraft
}

class BossEnemy {
    - int shootNum
    - int power
    - int direction

    + BossEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + getDirection():int
    + forward():void
    + shoot():List<Bullet>
    + getPower():int
    + getShootNum():int
    + getMultiNum():int
    + addProp():List<AbstractProp>
    + update():void
}

class BossFactory {
    + createEnemy():AbstractAircraft
}

class EasyModegame {
    + initGame():void
}

class NormalModegame {
    + initGame():void
}

class HardModegame {
    + initGame():void
}

class HeroBullet {
    + HeroBullet(int locationX, int locationY, int speedX, int speedY, int power)
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY, int speedX, int speedY, int power)
}

class BloodProp {
    + BloodProp(int locationX, int locationY, int speedX, int speedY)
    + effect(HeroAircraft heroAircraft, List<AbstractAircraft> enemyAircrafts,List<AbstractBullet> enemyBullets):void

}

class BloodPropFactory {
    + createProp():AbstractProp
}

class BombProp {
    + BloodProp(int locationX, int locationY, int speedX, int speedY)
    + effect(HeroAircraft heroAircraft, List<AbstractAircraft> enemyAircrafts,List<AbstractBullet> enemyBullets):void
}

class BombPropFactory {
    + createProp():AbstractProp
}

class BulletProp {
    + BloodProp(int locationX, int locationY, int speedX, int speedY)
    + effect(HeroAircraft heroAircraft, List<AbstractAircraft> enemyAircrafts,List<AbstractBullet> enemyBullets):void
}

class BulletPropFactory {
    + createProp():AbstractProp
}

class BombPublisher{
    -  BombPublisher bombPublisher {static}
    - List<AbstractAircraft> enemyAircrafts
    - List<BaseBullet> enemyBullets

    - BombPublisher()
    + {static} getBombPublisher():BombPublisher
    + subscribe(AbstractFlyingObject abstractFlyingObject):void
    + unsubscribe(AbstractFlyingObject abstractFlyingObject):void
    + notifyAllSubscriber():void
    + bombEffect():void
}

class Player
{
    - long serialVersionUID {static} {final}
    - String playerName
    - int playerScore
    - String playerTime

    + Player(String playerName,int playerScore,String playerTime)
    + getPlayerTime():String
    + setPlayerTime(String playerTime):void
    + getPlayerName():String
    + setPlayerName(String playerName):void
    + getPlayerScore():int
    + setPlayerScore(int playerScore):void
}

class PlayerDaoImpl
{
    - List<Player> players
    - PlayerDaoImpl playerDaoImpl {volatile} {static}

    - PlayerDaoImpl()
    + {static} getPlayerDaoImpl():PlayerDaoImpl
    + findByPlayerName(String playerName):Player
    + getAllPlayer():List<Player>
    + doAdd(Player player):void
    + doDelete(String playerName):void
    + writeToFile(String fileName) throws IOException:void
    + readFromFile(String fileName) throws IOException:void
    - {static} <T> castList(Object obj,Class<T> thisClass):List<T>
}

class Context
{
    - Strategy strategy

    + Context(Strategy strategy)
    + setStrategy(Strategy strategy):void
    + executeStrategy(AbstractAircraft abstractAircraft):List<BaseBullet>
}

class SlashShoot
{
    + shootFunction(AbstractAircraft abstractAircraft):List<BaseBullet>
}

class StraightShoot
{
    + shootFunction(AbstractAircraft abstractAircraft):List<BaseBullet>
}

@enduml